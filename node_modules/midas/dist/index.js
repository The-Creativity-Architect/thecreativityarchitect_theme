'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _hastUtilToHtml = require('hast-util-to-html');

var _hastUtilToHtml2 = _interopRequireDefault(_hastUtilToHtml);

var _toVDOM = require('./toVDOM');

var _toVDOM2 = _interopRequireDefault(_toVDOM);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Midas takes a CSS string, and compiles it into a HTML output that's complete
 * with styling hooks, for powerful syntax highlighting. It can yield either
 * a HTML string, or a virtual DOM tree for usage with React or other
 * virtual node consumers.
 *
 * #### Plugins
 *
 * * {@link https://github.com/facebook/react|react}: {@link https://github.com/ben-eb/react-midas|react-midas}
 * * {@link https://github.com/wooorm/remark|remark}: {@link https://github.com/ben-eb/remark-midas|remark-midas}
 *
 * @constructor
 * @param {Object} [opts] Options object.
 * @param {Function|boolean} [opts.stringify=toHTML] Pass in a function to convert HAST
 * into a string. This defaults to {@link https://github.com/wooorm/hast-util-to-html|hast-util-to-html}.
 * If `false`, processing a CSS string will yield HAST instead.
 * @param {boolean} [opts.wrap=true] Wrap the output with `<pre class="midas"></pre>`.
 * By default, the CSS will also be wrapped with `<code></code>`.
 */

var Midas = function () {
    function Midas(opts) {
        _classCallCheck(this, Midas);

        var _stringify$wrap$opts = _extends({
            stringify: _hastUtilToHtml2.default,
            wrap: true
        }, opts),
            wrap = _stringify$wrap$opts.wrap,
            stringify = _stringify$wrap$opts.stringify;

        this._stringify = stringify;
        this._vdom = new _toVDOM2.default({ wrap: wrap });
        return this;
    }

    /**
     * Convert a CSS string to either a HTML string or a virtual DOM tree.
     *
     * @param css CSS string to process.
     * @param args The rest of the options are passed directly to the
     * `stringify` function defined by the constructor.
     * @return {*|Array} Returns either anything invoked by calling the
     * `stringify` function, or if no `stringify` method is supplied, it
     * returns HAST instead.
     * @example <caption>Default usage:</caption>
     *
     * import Midas from 'midas';
     *
     * const htmlOutput = new Midas();
     * const html = htmlOutput.process('h1 {}'); // <pre class="midas"><code>...
     *
     * const hastOutput = new Midas({stringify: false});
     * const hast = hastOutput.process('h1 {}') // {type: 'element', tagName: 'pre', properties: {className: ['midas']}, children: [...]}
     *
     * @example <caption>React compatibility:</caption>
     *
     * import React from 'react';
     * import Midas from 'midas';
     * import toH from 'hast-to-hyperscript';
     *
     * const midas = new Midas({stringify: false});
     *
     * const ShowCSSCode = ({css}) => (
     *     <div>
     *         {toH(React.createElement, midas.process(css))}
     *     </div>
     * );
     */

    Midas.prototype.process = function process(css) {
        var ast = this._vdom.getContent((0, _postcss2.default)().process(css).root);

        if (typeof this._stringify === 'function') {
            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
            }

            return this._stringify.apply(this, [ast].concat(args));
        }

        return ast;
    };

    /**
     * Get a stringifier intended to be consumed by a PostCSS instance. Note
     * that because PostCSS casts anything returned by custom stringifiers to
     * strings, you cannot use this interface to yield a virtual DOM.
     *
     * @return {Object} PostCSS compatible stringifier.
     * @example
     *
     * import postcss from 'postcss';
     * import Midas from 'midas';
     *
     * const midas = new Midas();
     * const css = 'h1 {}';
     *
     * postcss().process(css, {stringifier: midas.stringifier}).then(result => {
     *     console.log(result.content); // <pre class="midas"><code>...
     * });
     */

    _createClass(Midas, [{
        key: 'stringifier',
        get: function get() {
            var _this = this;

            var stringify = function stringify(root, builder) {
                builder((0, _hastUtilToHtml2.default)(_this._vdom.getContent(root)));
            };
            return { stringify: stringify };
        }
    }]);

    return Midas;
}();

exports.default = Midas;
module.exports = exports['default'];